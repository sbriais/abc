push l
agent Zero = l(z,d,ds).'z
agent Double(n) = (^k)(l(z,d,ds).'d<k> | 'n<k>)
agent DoubleS(n) = (^k)(l(z,d,ds).'ds<k> | 'n<k>)
agent BinIntMatch(caseZero,caseDouble,caseDoubleS) = 'l<caseZero,caseDouble,caseDoubleS>
pop

(* Move moves the integer at location l to location m *)
agent Move(l,m) = \
	(^caseZero,caseDouble,caseDoubleS) \
		(  BinIntMatch(l,caseZero,caseDouble,caseDoubleS) \
		 | (  caseZero.Zero(m) \
		    + caseDouble(lp).m(z,d,ds).'d<lp> \
		    + caseDoubleS(lp).m(z,d,ds).'ds<lp>))

agent Un(l) = (^k)(l(z,d,ds).'ds<k> | Zero(k))

(* Succ computes the successor of the integer at location l and put it at location m *)
agent Succ(l,m) = \
	(^caseZero,caseDouble,caseDoubleS) \
		(  BinIntMatch(l,caseZero,caseDouble,caseDoubleS) \
		 | (  caseZero.Un(m) \
		    + caseDouble(lp).((^k)(m(z,d,ds).'ds<k> | Succ(lp,k))) \
		    + caseDoubleS(lp).m(z,d,ds).'d<lp>))

agent Copy(l,m,done) = \
	(^caseZero,caseDouble,caseDoubleS) \
		(  BinIntMatch(l,caseZero,caseDouble,caseDoubleS) \
		 | (  caseZero.(Zero(l) | Zero(m) | 'done) \
		    + caseDouble(lp).((^copy)(Double(m,copy) | copy(k).(l(z,d,ds).'d<lp> | Copy(lp,k,done)))) \
		    + caseDoubleS(lp).((^copy)(DoubleS(m,copy) | copy(k).(l(z,d,ds).'ds<lp> | Copy(lp,k,done))))))

agent Deux(l) = (^k)(l(z,d,ds).'d<k> | Zero(k))
agent Trois(l) = (^k)(l(z,d,ds).'ds<k> | Un(k))
agent Quatre(l) = (^k)(l(z,d,ds).'d<k> | Un(k))
agent Cinq(l) = (^k)(l(z,d,ds).'ds<k> | Deux(k))
agent Six(l) = (^k)(l(z,d,ds).'d<k> | Deux(k))

agent Add(l,m,n) = \
      (^caseZero,caseDouble,caseDoubleS) \
		(  BinIntMatch(l,caseZero,caseDouble,caseDoubleS) \
		 | (  caseZero.Move(m,n) \
		    + caseDouble(lp).(  BinIntMatch(m,caseZero,caseDouble,caseDoubleS) \
		                      | (  caseZero.((^move)(Double(n,move) | move(np).Move(lp,np))) \
				         + caseDouble(mp).((^add)(Double(n,add) | add(np).((^k)(Succ(k,np) | Add(lp,mp,k))))) \
					 + caseDoubleS(mp).((^add)(DoubleS(n,add) | add(np).((^k)(Succ(k,np) | Add(lp,mp,k))))))) \
		    + caseDoubleS(lp).(  BinIntMatch(m,caseZero,caseDouble,caseDoubleS) \
		                      | (  caseZero.((^move)(DoubleS(n,move) | move(np).Move(lp,np))) \
				         + caseDouble(mp).((^add)(DoubleS(n,add) | add(np).((^k)(Succ(k,np) | Add(lp,mp,k))))) \
					 + caseDoubleS(mp).((^add)(Double(n,add) | add(np).Add(lp,mp,np)))))))

agent Pred(l,m) = \      
	(^caseZero,caseDouble,caseDoubleS) \
		(  BinIntMatch(l,caseZero,caseDouble,caseDoubleS) \
		 | (  caseZero.Zero(m) \
		    + caseDouble(lp).((^move)(DoubleS(m,move) | move(k).Move(lp,k))) \
		    + caseDoubleS(lp).(  BinIntMatch(lp,caseZero,caseDouble,caseDoubleS) \
		                      | (  caseZero.Zero(m) \
				         + caseDouble(lpp).((^pred)(Double(m,pred) | pred(k).((^n)(Pred(n,k) | Double(n,pred) | pred(m).Move(lpp,m))))) \
					 + caseDoubleS(lpp).((^pred)(Double(m,pred) | pred(k).((^n)(Pred(n,k) | DoubleS(n,pred) | pred(m).Move(lpp,m)))))))))


agent Fois2(l,m) = \
	(^caseZero,caseDouble,caseDoubleS) \
		(  BinIntMatch(l,caseZero,caseDouble,caseDoubleS) \
		 | (  caseZero.Zero(m) \
		    + caseDouble(lp).((^fois2)(Double(m,fois2) | fois2(k).((^move)(DoubleS(k,move) | move(m).Move(lp,m))))) \
		    + caseDoubleS(lp).((^fois2)(Double(m,fois2) | fois2(k).Fois2(lp,k)))))
